<?xml version="1.0" encoding="UTF-8"?>
<xsl:transform xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:array="http://www.w3.org/2005/xpath-functions/array"
  xmlns:map="http://www.w3.org/2005/xpath-functions/map"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xd="http://www.oxygenxml.com/ns/doc/xsl"
  xmlns:dsl="https://dsl.unibe.ch"
  exclude-result-prefixes="xs xd"
  version="3.0">
  <xd:doc scope="stylesheet">
    <xd:desc>
      <xd:p><xd:b>Created on:</xd:b> Jan 29, 2024</xd:p>
      <xd:p><xd:b>Author:</xd:b> pd</xd:p>
      <xd:p></xd:p>
    </xd:desc>
  </xd:doc>
  
  <!-- 
    Simple script to translate the JSON format generated by Felix Rieseberg's Slack archiver
    (https://github.com/felixrieseberg/slack-archive) to the Discord import format understood 
    by pROPs' Discord importer (https://github.com/pR0Ps/slack-to-discord).
    
    How does it work?
    =================
    
    - The order of the maps within the array is reversed.
    - User profile information is added to each message.
    - The messages are grouped by day and stored in daily files.
    - Entries without "user" info are skipped.
    
    What is needed?
    ===============
    
    A users.json file to supply user profile info and a channels.json file to retrieve channel
    related information (also refer to this file to find the name of the input file).
     
    How to run it?
    ==============
    
    - install Saxon HE
    - run the following command: 
    
      java -jar {$path-to-saxon}/saxon-he.jar \
      -s:slaccordeon.xsl \
      -xsl:slaccordeon.xsl \
      input={$input-path}/{C012GBADPD1}.json \
      users.json={$input-path}/users.json \
      channels.json={$input-path}/channels.json
      
      (any {$expression} needs to be replaced by absolute or relative paths,
       any {expression} needs to be replaced by the channel ID)
    
    How to import?
    ==============
    
    Create a zip file containing all the generated directories as well as users.json and 
    channels.json and supply it as "zipfile" to slack-to-discord (see the instructions at
    https://github.com/pR0Ps/slack-to-discord#instructions).
    
    Check/adjust channel permissions during or after import.
     
    Prerequisites:
    ==============
    
    - specify input file/file path in $input
    - specify channels.json file/file path in $channels.json (take this file from a recent export)
    - specify users.json file/file path in $users.json (take this file from a recent export)
    
  -->
  
  <xsl:param name="input" as="xs:string" select="'path-to-input-directory/input.json'"/>
  <xsl:param name="users.json" as="xs:string" select="'path-to-input-directory/users.json'"/>
  <xsl:param name="channels.json" as="xs:string" select="'path-to-input-directory/channels.json'"/>
  
  <!-- No changes should be required below this line. -->
  
  <xsl:param name="input-doc" as="array(*)" select="json-doc($input) => array:filter(function($v){map:contains($v,'user')})"/>
  <xsl:param name="input-doc-reverse" as="array(*)" select="$input-doc => array:reverse()"/>
  
  <xsl:param name="channel" as="xs:string" select="($input => tokenize('/'))[last()] => replace('(.+)\.json','$1')"/>
  <xsl:param name="output-dir" as="xs:string" select="$input => replace('\w*\.json',json-doc($channels.json)?*[map:get(.,'id')=$channel]?name)"/>
  
  <xsl:function name="dsl:date-from-ts" as="xs:dateTime">
    <xsl:param name="ts" as="xs:string"/>
    <xsl:sequence select="xs:dateTime('1970-01-01T00:00:00') + ('PT'||$ts||'S') => xs:dayTimeDuration()"/>
  </xsl:function>
  
  <xsl:template match="/">
    <xsl:for-each-group select="$input-doc-reverse?*" group-by="dsl:date-from-ts(.?ts) => xs:string() => substring-before('T')">
      <xsl:result-document href="{$output-dir}/{current-grouping-key()}.json" method="json" indent="true" encoding="utf-8">
        <xsl:variable name="user" as="xs:string" select=".?user"/>
        <xsl:variable name="user_profile" as="map(*)" select="for $i in json-doc($users.json)?*[map:get(.,'id')=$user] return 
          map{
          'avatar_hash' :$i?profile?avatar_hash,
          'image_72':$i?profile?image_72,
          'first_name':$i?profile?first_name,
          'real_name':$i?profile?real_name,
          'display_name':$i?profile?display_name,
          'team':$i?profile?team,
          'name':$i?name,
          'is_restricted':map:get($i,'is_restricted'),
          'is_ultra_restricted':map:get($i,'is_ultra_restricted')
          }"/>
        <xsl:variable name="inject" as="map(*)+" select="
          map{'source_team':.?team,'user_team':current()?team},
          map{'user_profile':$user_profile}"/>
        <xsl:sequence select="array { current-group() ! map:merge((.,$inject)) }"/>
      </xsl:result-document>
    </xsl:for-each-group>
  </xsl:template>
  
</xsl:transform>
